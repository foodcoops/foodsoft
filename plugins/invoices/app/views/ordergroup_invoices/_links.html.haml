-# - show_generate_with_date = true
-# - multi_order.multi_group_orders.each do |mgo|
-#   - if mgo.ordergroup_invoice.present?
-#     - show_generate_with_date = false
-# - if show_generate_with_date
-#   = form_for :ordergroup_invoice, url: finance_ordergroup_invoice_path(foodcoop: FoodsoftConfig[:default_scope], protocol: :https), remote: true do |f|
-#     = f.label :invoice_date, I18n.t('activerecord.attributes.group_order_invoice.links.invoice_date')
-#     = f.date_field :invoice_date, {value: Date.today, max: Date.today, required: true}
-#     = f.hidden_field :multi_order_id, value: multi_order.id
-#
-#     = f.submit  I18n.t('activerecord.attributes.group_order_invoice.links.generate_with_date'), class: 'btn btn'

%table.table.group-order-invoices-table
  %thead
    %tr
      %th=I18n.t('activerecord.attributes.group_order_invoice.links.ordergroup')
      %th=I18n.t('activerecord.attributes.group_order_invoice.links.paid')
      %th=I18n.t('activerecord.attributes.group_order_invoice.links.invoice_number')
      %th
  %tbody
    - multi_order.multi_group_orders.each do |mgo|
      -if mgo.ordergroup_invoice.present?
        %tr.order-row{id: "multi_group_order_#{mgo.id}"}
          %td
            = link_to mgo.ordergroup&.name, edit_admin_ordergroup_path(mgo.ordergroup)
          %td
            -# .div{id: "paid_multi_#{mgo.ordergroup_invoice.id}"}
            -#   = render :partial => "ordergroup_invoices/toggle_paid", locals: { ordergroup_invoice: mgo.ordergroup_invoice }
          %td
            %b= mgo.ordergroup_invoice.invoice_number
            - if mgo.ordergroup_invoice.email_sent_at.present?
              %br/
              = I18n.t('activerecord.attributes.ordergroup_invoice.email_sent')
              = mgo.ordergroup_invoice.email_sent_at.strftime("%d.%m.%Y %H:%M")
          %td
            = link_to  I18n.t('activerecord.attributes.group_order_invoice.links.delete'), mgo.ordergroup_invoice, method: :delete, class: 'btn btn-block btn-danger', remote: true, data: { confirm: I18n.t('ui.confirm_delete', name: "Bestellgruppenrechnung fÃ¼r #{mgo.ordergroup.name}" ) }
            -# = link_to I18n.t('activerecord.attributes.group_order_invoice.links.download'), ordergroup_invoice_path(mgo.ordergroup_invoice, :format => 'pdf'), class: 'btn btn-block'
      - else
        %tr
          %td
            = mgo.group_orders.first.ordergroup&.name
            = button_to I18n.t('activerecord.attributes.group_order_invoice.links.generate'), ordergroup_invoices_path(:method => :post, multi_group_order_id: mgo) ,class: 'btn btn-small', remote: true
          %td
          %td
          %td
    - if multi_order.multi_group_orders.map(&:ordergroup_invoice).compact.present?
      %tr.order-row
        %td= I18n.t('activerecord.attributes.group_order_invoice.links.actions_for_all')
        %td
          -# .div{id: "toggle_all_paid_multi_#{multi_order.id}"}
          -#   = render :partial => 'ordergroup_invoices/toggle_all_paid', locals: { multi_order: multi_order }
        %td
        %td
          - if multi_order.multi_group_orders.count == multi_order.multi_group_orders.map(&:ordergroup_invoice).compact&.count
            = link_to I18n.t('activerecord.attributes.group_order_invoice.links.download_all_zip'), download_all_ordergroup_invoices_path(multi_order), class: 'btn btn-block'
            -# sends all ordergroup invoices to the ordergoups mail address via notifyjob
            = link_to I18n.t('activerecord.attributes.group_order_invoice.links.send_all_by_email'), send_all_ordergroup_invoices_path(multi_order), class: 'btn btn-block', method: :post, data: { confirm: I18n.t('activerecord.attributes.group_order_invoice.links.confirm_send_all', ordergroups: "#{multi_order.multi_group_orders.map(&:ordergroup).map(&:name).join(', ')}" ) }
